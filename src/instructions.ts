export interface instruction {
    op: ins,
    byteLength: number,
    operands: operand[],
}

export enum operand {
    A, B, C, D, E, F, H, L,
    AF, BC, DE, HL,
    SP, PC,
    d8, d16, a8, a16, r8,
    NZ, HLPlus, Z, NC, HLMinus,
    H00, H10, H20, H30, H08, H18, H28, H38,
    SPPlusR8
}

/** Basic instructions */
export enum ins {
    NOP, STOP, HALT, PrefixCB, DI, EI,
    LD, LDH,
    INC, DEC,
    RLCA, RRCA, RLA, RRA,
    ADD, ADC, SUB, SBC,
    AND, XOR, OR, CP,
    JR, RET, JP, CALL, RST, RETI,
    DAA, CPL, SCF, CCF,
    POP, PUSH,
    EMTY
}

/** Instruction set, from http://pastraiser.com/cpu/gameboy/gameboy_opcodes.html */
export const instructionSet: instruction[] = [
    // 00
    { op: ins.NOP,  byteLength: 1, operands: []},
    { op: ins.LD,   byteLength: 3, operands: [operand.BC, operand.d16]},
    { op: ins.LD,   byteLength: 1, operands: [operand.BC, operand.A]},
    { op: ins.INC,  byteLength: 1, operands: [operand.BC]},
    { op: ins.INC,  byteLength: 1, operands: [operand.B]},
    { op: ins.DEC,  byteLength: 1, operands: [operand.B]},
    { op: ins.LD,   byteLength: 2, operands: [operand.B, operand.d8]},
    { op: ins.RLCA, byteLength: 1, operands: []},
    // 08
    { op: ins.LD,   byteLength: 3, operands: [operand.a16, operand.SP]},
    { op: ins.ADD,  byteLength: 1, operands: [operand.HL, operand.BC]},
    { op: ins.LD,   byteLength: 1, operands: [operand.A, operand.BC]},
    { op: ins.DEC,  byteLength: 1, operands: [operand.BC]},
    { op: ins.INC,  byteLength: 1, operands: [operand.C]},
    { op: ins.DEC,  byteLength: 1, operands: [operand.C]},
    { op: ins.LD,   byteLength: 2, operands: [operand.C, operand.d8]},
    { op: ins.RRCA, byteLength: 1, operands: []},

    // 10
    { op: ins.STOP, byteLength: 2, operands: []},
    { op: ins.LD,   byteLength: 3, operands: [operand.DE, operand.d16]},
    { op: ins.LD,   byteLength: 1, operands: [operand.DE, operand.A]},
    { op: ins.INC,  byteLength: 1, operands: [operand.DE]},
    { op: ins.INC,  byteLength: 1, operands: [operand.D]},
    { op: ins.DEC,  byteLength: 1, operands: [operand.D]},
    { op: ins.LD,   byteLength: 2, operands: [operand.D, operand.d8]},
    { op: ins.RLA,  byteLength: 1, operands: []},
    // 18
    { op: ins.JR,   byteLength: 2, operands: [operand.r8]},
    { op: ins.ADD,  byteLength: 1, operands: [operand.HL, operand.DE]},
    { op: ins.LD,   byteLength: 1, operands: [operand.A, operand.DE]},
    { op: ins.DEC,  byteLength: 1, operands: [operand.DE]},
    { op: ins.INC,  byteLength: 1, operands: [operand.E]},
    { op: ins.DEC,  byteLength: 1, operands: [operand.E]},
    { op: ins.LD,   byteLength: 2, operands: [operand.E, operand.d8]},
    { op: ins.RRA,  byteLength: 1, operands: []},

    // 20
    { op: ins.JR,   byteLength: 2, operands: [operand.NZ, operand.r8]},
    { op: ins.LD,   byteLength: 3, operands: [operand.HL, operand.d16]},
    { op: ins.LD,   byteLength: 1, operands: [operand.HLPlus, operand.A]},
    { op: ins.INC,  byteLength: 1, operands: [operand.HL]},
    { op: ins.INC,  byteLength: 1, operands: [operand.H]},
    { op: ins.DEC,  byteLength: 1, operands: [operand.H]},
    { op: ins.LD,   byteLength: 2, operands: [operand.H, operand.d8]},
    { op: ins.DAA,  byteLength: 1, operands: []},
    // 28
    { op: ins.JR,   byteLength: 2, operands: [operand.Z, operand.r8]},
    { op: ins.ADD,  byteLength: 1, operands: [operand.HL, operand.HL]},
    { op: ins.LD,   byteLength: 1, operands: [operand.A, operand.HLPlus]},
    { op: ins.DEC,  byteLength: 1, operands: [operand.HL]},
    { op: ins.INC,  byteLength: 1, operands: [operand.L]},
    { op: ins.DEC,  byteLength: 1, operands: [operand.L]},
    { op: ins.LD,   byteLength: 2, operands: [operand.L, operand.d8]},
    { op: ins.CPL,  byteLength: 1, operands: []},

    // 30
    { op: ins.JR,   byteLength: 2, operands: [operand.NC, operand.r8]},
    { op: ins.LD,   byteLength: 3, operands: [operand.SP, operand.d16]},
    { op: ins.LD,   byteLength: 1, operands: [operand.HLMinus, operand.A]},
    { op: ins.INC,  byteLength: 1, operands: [operand.SP]},
    { op: ins.INC,  byteLength: 1, operands: [operand.HL]},
    { op: ins.DEC,  byteLength: 1, operands: [operand.HL]},
    { op: ins.LD,   byteLength: 2, operands: [operand.HL, operand.d8]},
    { op: ins.SCF,  byteLength: 1, operands: []},
    // 38
    { op: ins.JR,   byteLength: 2, operands: [operand.C, operand.r8]},
    { op: ins.ADD,  byteLength: 1, operands: [operand.HL, operand.SP]},
    { op: ins.LD,   byteLength: 1, operands: [operand.A, operand.HLMinus]},
    { op: ins.DEC,  byteLength: 1, operands: [operand.SP]},
    { op: ins.INC,  byteLength: 1, operands: [operand.A]},
    { op: ins.DEC,  byteLength: 1, operands: [operand.A]},
    { op: ins.LD,   byteLength: 2, operands: [operand.A, operand.d8]},
    { op: ins.CCF,  byteLength: 1, operands: []},

    // 40
    { op: ins.LD,   byteLength: 1, operands: [operand.B, operand.B]},
    { op: ins.LD,   byteLength: 1, operands: [operand.B, operand.C]},
    { op: ins.LD,   byteLength: 1, operands: [operand.B, operand.D]},
    { op: ins.LD,   byteLength: 1, operands: [operand.B, operand.E]},
    { op: ins.LD,   byteLength: 1, operands: [operand.B, operand.H]},
    { op: ins.LD,   byteLength: 1, operands: [operand.B, operand.L]},
    { op: ins.LD,   byteLength: 1, operands: [operand.B, operand.HL]},
    { op: ins.LD,   byteLength: 1, operands: [operand.B, operand.A]},
    // 48
    { op: ins.LD,   byteLength: 1, operands: [operand.C, operand.B]},
    { op: ins.LD,   byteLength: 1, operands: [operand.C, operand.C]},
    { op: ins.LD,   byteLength: 1, operands: [operand.C, operand.D]},
    { op: ins.LD,   byteLength: 1, operands: [operand.C, operand.E]},
    { op: ins.LD,   byteLength: 1, operands: [operand.C, operand.H]},
    { op: ins.LD,   byteLength: 1, operands: [operand.C, operand.L]},
    { op: ins.LD,   byteLength: 1, operands: [operand.C, operand.HL]},
    { op: ins.LD,   byteLength: 1, operands: [operand.C, operand.A]},

    // 50
    { op: ins.LD,   byteLength: 1, operands: [operand.D, operand.B]},
    { op: ins.LD,   byteLength: 1, operands: [operand.D, operand.C]},
    { op: ins.LD,   byteLength: 1, operands: [operand.D, operand.D]},
    { op: ins.LD,   byteLength: 1, operands: [operand.D, operand.E]},
    { op: ins.LD,   byteLength: 1, operands: [operand.D, operand.H]},
    { op: ins.LD,   byteLength: 1, operands: [operand.D, operand.L]},
    { op: ins.LD,   byteLength: 1, operands: [operand.D, operand.HL]},
    { op: ins.LD,   byteLength: 1, operands: [operand.D, operand.A]},
    // 58
    { op: ins.LD,   byteLength: 1, operands: [operand.E, operand.B]},
    { op: ins.LD,   byteLength: 1, operands: [operand.E, operand.C]},
    { op: ins.LD,   byteLength: 1, operands: [operand.E, operand.D]},
    { op: ins.LD,   byteLength: 1, operands: [operand.E, operand.E]},
    { op: ins.LD,   byteLength: 1, operands: [operand.E, operand.H]},
    { op: ins.LD,   byteLength: 1, operands: [operand.E, operand.L]},
    { op: ins.LD,   byteLength: 1, operands: [operand.E, operand.HL]},
    { op: ins.LD,   byteLength: 1, operands: [operand.E, operand.A]},

    // 60
    { op: ins.LD,   byteLength: 1, operands: [operand.H, operand.B]},
    { op: ins.LD,   byteLength: 1, operands: [operand.H, operand.C]},
    { op: ins.LD,   byteLength: 1, operands: [operand.H, operand.D]},
    { op: ins.LD,   byteLength: 1, operands: [operand.H, operand.E]},
    { op: ins.LD,   byteLength: 1, operands: [operand.H, operand.H]},
    { op: ins.LD,   byteLength: 1, operands: [operand.H, operand.L]},
    { op: ins.LD,   byteLength: 1, operands: [operand.H, operand.HL]},
    { op: ins.LD,   byteLength: 1, operands: [operand.H, operand.A]},
    // 68
    { op: ins.LD,   byteLength: 1, operands: [operand.L, operand.B]},
    { op: ins.LD,   byteLength: 1, operands: [operand.L, operand.C]},
    { op: ins.LD,   byteLength: 1, operands: [operand.L, operand.D]},
    { op: ins.LD,   byteLength: 1, operands: [operand.L, operand.E]},
    { op: ins.LD,   byteLength: 1, operands: [operand.L, operand.H]},
    { op: ins.LD,   byteLength: 1, operands: [operand.L, operand.L]},
    { op: ins.LD,   byteLength: 1, operands: [operand.L, operand.HL]},
    { op: ins.LD,   byteLength: 1, operands: [operand.L, operand.A]},

    // 70
    { op: ins.LD,   byteLength: 1, operands: [operand.HL, operand.B]},
    { op: ins.LD,   byteLength: 1, operands: [operand.HL, operand.C]},
    { op: ins.LD,   byteLength: 1, operands: [operand.HL, operand.D]},
    { op: ins.LD,   byteLength: 1, operands: [operand.HL, operand.E]},
    { op: ins.LD,   byteLength: 1, operands: [operand.HL, operand.H]},
    { op: ins.LD,   byteLength: 1, operands: [operand.HL, operand.L]},
    { op: ins.HALT, byteLength: 1, operands: []},
    { op: ins.LD,   byteLength: 1, operands: [operand.HL, operand.A]},
    // 78
    { op: ins.LD,   byteLength: 1, operands: [operand.A, operand.B]},
    { op: ins.LD,   byteLength: 1, operands: [operand.A, operand.C]},
    { op: ins.LD,   byteLength: 1, operands: [operand.A, operand.D]},
    { op: ins.LD,   byteLength: 1, operands: [operand.A, operand.E]},
    { op: ins.LD,   byteLength: 1, operands: [operand.A, operand.H]},
    { op: ins.LD,   byteLength: 1, operands: [operand.A, operand.L]},
    { op: ins.LD,   byteLength: 1, operands: [operand.A, operand.HL]},
    { op: ins.LD,   byteLength: 1, operands: [operand.A, operand.A]},

    // 80
    { op: ins.ADD,  byteLength: 1, operands: [operand.A, operand.B]},
    { op: ins.ADD,  byteLength: 1, operands: [operand.A, operand.C]},
    { op: ins.ADD,  byteLength: 1, operands: [operand.A, operand.D]},
    { op: ins.ADD,  byteLength: 1, operands: [operand.A, operand.E]},
    { op: ins.ADD,  byteLength: 1, operands: [operand.A, operand.H]},
    { op: ins.ADD,  byteLength: 1, operands: [operand.A, operand.L]},
    { op: ins.ADD,  byteLength: 1, operands: [operand.A, operand.HL]},
    { op: ins.ADD,  byteLength: 1, operands: [operand.A, operand.A]},
    // 88
    { op: ins.ADC,  byteLength: 1, operands: [operand.A, operand.B]},
    { op: ins.ADC,  byteLength: 1, operands: [operand.A, operand.C]},
    { op: ins.ADC,  byteLength: 1, operands: [operand.A, operand.D]},
    { op: ins.ADC,  byteLength: 1, operands: [operand.A, operand.E]},
    { op: ins.ADC,  byteLength: 1, operands: [operand.A, operand.H]},
    { op: ins.ADC,  byteLength: 1, operands: [operand.A, operand.L]},
    { op: ins.ADC,  byteLength: 1, operands: [operand.A, operand.HL]},
    { op: ins.ADC,  byteLength: 1, operands: [operand.A, operand.A]},

    // 90
    { op: ins.SUB,  byteLength: 1, operands: [operand.B]},
    { op: ins.SUB,  byteLength: 1, operands: [operand.C]},
    { op: ins.SUB,  byteLength: 1, operands: [operand.D]},
    { op: ins.SUB,  byteLength: 1, operands: [operand.E]},
    { op: ins.SUB,  byteLength: 1, operands: [operand.H]},
    { op: ins.SUB,  byteLength: 1, operands: [operand.L]},
    { op: ins.SUB,  byteLength: 1, operands: [operand.HL]},
    { op: ins.SUB,  byteLength: 1, operands: [operand.A]},
    // 98
    { op: ins.SBC,  byteLength: 1, operands: [operand.A, operand.B]},
    { op: ins.SBC,  byteLength: 1, operands: [operand.A, operand.C]},
    { op: ins.SBC,  byteLength: 1, operands: [operand.A, operand.D]},
    { op: ins.SBC,  byteLength: 1, operands: [operand.A, operand.E]},
    { op: ins.SBC,  byteLength: 1, operands: [operand.A, operand.H]},
    { op: ins.SBC,  byteLength: 1, operands: [operand.A, operand.L]},
    { op: ins.SBC,  byteLength: 1, operands: [operand.A, operand.HL]},
    { op: ins.SBC,  byteLength: 1, operands: [operand.A, operand.A]},

    // A0
    { op: ins.AND,  byteLength: 1, operands: [operand.B]},
    { op: ins.AND,  byteLength: 1, operands: [operand.C]},
    { op: ins.AND,  byteLength: 1, operands: [operand.D]},
    { op: ins.AND,  byteLength: 1, operands: [operand.E]},
    { op: ins.AND,  byteLength: 1, operands: [operand.H]},
    { op: ins.AND,  byteLength: 1, operands: [operand.L]},
    { op: ins.AND,  byteLength: 1, operands: [operand.HL]},
    { op: ins.AND,  byteLength: 1, operands: [operand.A]},
    // A8
    { op: ins.XOR,  byteLength: 1, operands: [operand.B]},
    { op: ins.XOR,  byteLength: 1, operands: [operand.C]},
    { op: ins.XOR,  byteLength: 1, operands: [operand.D]},
    { op: ins.XOR,  byteLength: 1, operands: [operand.E]},
    { op: ins.XOR,  byteLength: 1, operands: [operand.H]},
    { op: ins.XOR,  byteLength: 1, operands: [operand.L]},
    { op: ins.XOR,  byteLength: 1, operands: [operand.HL]},
    { op: ins.XOR,  byteLength: 1, operands: [operand.A]},

    // B0
    { op: ins.OR,   byteLength: 1, operands: [operand.B]},
    { op: ins.OR,   byteLength: 1, operands: [operand.C]},
    { op: ins.OR,   byteLength: 1, operands: [operand.D]},
    { op: ins.OR,   byteLength: 1, operands: [operand.E]},
    { op: ins.OR,   byteLength: 1, operands: [operand.H]},
    { op: ins.OR,   byteLength: 1, operands: [operand.L]},
    { op: ins.OR,   byteLength: 1, operands: [operand.HL]},
    { op: ins.OR,   byteLength: 1, operands: [operand.A]},
    // B8
    { op: ins.CP,   byteLength: 1, operands: [operand.B]},
    { op: ins.CP,   byteLength: 1, operands: [operand.C]},
    { op: ins.CP,   byteLength: 1, operands: [operand.D]},
    { op: ins.CP,   byteLength: 1, operands: [operand.E]},
    { op: ins.CP,   byteLength: 1, operands: [operand.H]},
    { op: ins.CP,   byteLength: 1, operands: [operand.L]},
    { op: ins.CP,   byteLength: 1, operands: [operand.HL]},
    { op: ins.CP,   byteLength: 1, operands: [operand.A]},

    // C0
    { op: ins.RET,  byteLength: 1, operands: [operand.NZ]},
    { op: ins.POP,  byteLength: 1, operands: [operand.BC]},
    { op: ins.JP,   byteLength: 3, operands: [operand.NZ, operand.a16]},
    { op: ins.JP,   byteLength: 3, operands: [operand.a16]},
    { op: ins.CALL, byteLength: 3, operands: [operand.NZ, operand.a16]},
    { op: ins.PUSH, byteLength: 1, operands: [operand.BC]},
    { op: ins.ADD,  byteLength: 2, operands: [operand.A, operand.d8]},
    { op: ins.RST,  byteLength: 1, operands: [operand.H00]},
    // C8
    { op: ins.RET,  byteLength: 1, operands: [operand.Z]},
    { op: ins.RET,  byteLength: 1, operands: []},
    { op: ins.JP,   byteLength: 2, operands: [operand.Z, operand.a16]},
    { op: ins.PrefixCB, byteLength: 1, operands: []},
    { op: ins.CALL, byteLength: 3, operands: [operand.Z, operand.a16]},
    { op: ins.CALL, byteLength: 3, operands: [operand.a16]},
    { op: ins.ADC,  byteLength: 2, operands: [operand.A, operand.d8]},
    { op: ins.RST,  byteLength: 1, operands: [operand.H08]},

    // D0
    { op: ins.RET,  byteLength: 1, operands: [operand.NC]},
    { op: ins.POP,  byteLength: 1, operands: [operand.DE]},
    { op: ins.JP,   byteLength: 3, operands: [operand.NC, operand.a16]},
    { op: ins.EMTY, byteLength: 1, operands: []},
    { op: ins.CALL, byteLength: 3, operands: [operand.NC, operand.a16]},
    { op: ins.PUSH, byteLength: 1, operands: [operand.DE]},
    { op: ins.SUB,  byteLength: 2, operands: [operand.d8]},
    { op: ins.RST,  byteLength: 1, operands: [operand.H10]},
    // D8
    { op: ins.RET,  byteLength: 1, operands: [operand.C]},
    { op: ins.RETI, byteLength: 1, operands: []},
    { op: ins.JP,   byteLength: 2, operands: [operand.C, operand.a16]},
    { op: ins.EMTY, byteLength: 1, operands: []},
    { op: ins.CALL, byteLength: 3, operands: [operand.C, operand.a16]},
    { op: ins.EMTY, byteLength: 1, operands: []},
    { op: ins.SBC,  byteLength: 2, operands: [operand.A, operand.d8]},
    { op: ins.RST,  byteLength: 1, operands: [operand.H18]},

    // E0
    { op: ins.LDH,  byteLength: 2, operands: [operand.a8, operand.A]},
    { op: ins.POP,  byteLength: 1, operands: [operand.HL]},
    { op: ins.LD,   byteLength: 2, operands: [operand.C, operand.A]},
    { op: ins.EMTY, byteLength: 1, operands: []},
    { op: ins.EMTY, byteLength: 1, operands: []},
    { op: ins.PUSH, byteLength: 1, operands: [operand.HL]},
    { op: ins.AND,  byteLength: 2, operands: [operand.d8]},
    { op: ins.RST,  byteLength: 1, operands: [operand.H20]},
    // E8
    { op: ins.ADD,  byteLength: 2, operands: [operand.SP, operand.r8]},
    { op: ins.JP,   byteLength: 1, operands: [operand.HL]},
    { op: ins.LD,   byteLength: 3, operands: [operand.a16, operand.A]},
    { op: ins.EMTY, byteLength: 1, operands: []},
    { op: ins.EMTY, byteLength: 1, operands: []},
    { op: ins.EMTY, byteLength: 1, operands: []},
    { op: ins.XOR,  byteLength: 2, operands: [operand.d8]},
    { op: ins.RST,  byteLength: 1, operands: [operand.H28]},

    // F0
    { op: ins.LDH,  byteLength: 2, operands: [operand.A, operand.a8]},
    { op: ins.POP,  byteLength: 1, operands: [operand.AF]},
    { op: ins.LD,   byteLength: 2, operands: [operand.A, operand.C]},
    { op: ins.DI,   byteLength: 1, operands: []},
    { op: ins.EMTY, byteLength: 1, operands: []},
    { op: ins.PUSH, byteLength: 1, operands: [operand.AF]},
    { op: ins.OR,   byteLength: 2, operands: [operand.d8]},
    { op: ins.RST,  byteLength: 1, operands: [operand.H30]},
    // F8
    { op: ins.LD,   byteLength: 2, operands: [operand.HL, operand.SPPlusR8]},
    { op: ins.JP,   byteLength: 1, operands: [operand.SP, operand.HL]},
    { op: ins.LD,   byteLength: 3, operands: [operand.A, operand.a16]},
    { op: ins.EI,   byteLength: 1, operands: []},
    { op: ins.EMTY, byteLength: 1, operands: []},
    { op: ins.EMTY, byteLength: 1, operands: []},
    { op: ins.CP,   byteLength: 2, operands: [operand.d8]},
    { op: ins.RST,  byteLength: 1, operands: [operand.H38]},
]
